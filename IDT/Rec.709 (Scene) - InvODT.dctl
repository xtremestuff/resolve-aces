//ITU-R BT.709 (Scene) ACES ODT
DEFINE_ACES_PARAM(Y_MIN: 0.02,
                  Y_MID: 8.6564,
                  Y_MAX: 48.0,
                  DISPLAY_PRI: { 0.64000, 0.33000, 0.30000, 0.60000, 0.15000, 0.06000, 0.31270, 0.32900 },
                  LIMITING_PRI: { 0.64000, 0.33000, 0.30000, 0.60000, 0.15000, 0.06000, 0.31270, 0.32900 },
                  EOTF: fwd_gamma,
                  INVERSE_EOTF: rev_gamma,
                  SURROUND: 0,
                  STRETCH_BLACK: 1,
                  D60_SIM: 0,
                  LEGAL_RANGE: 0)


__DEVICE__ float rec_to_lin(float x)
{
	if(x < 0.081f) return (x / 4.5f);
	else return _powf((x + 0.099f)/1.099f,(1.0f/0.45f));
}

__DEVICE__ float lin_to_rec(float x)
{
	if(x < .0018f) _fmaxf(4.5f * x, 0.0f);
	else return 1.099f * _powf(x,0.45f) - 0.099f;
}


__DEVICE__ float3 fwd_gamma(float3 p_InputCV, __CONSTANTREF__ AcesTransformUserSettingParams* p_AcesParams)
{
	float3 outputCV;
	
	outputCV.x = lin_to_rec(p_InputCV.x);
	outputCV.y = lin_to_rec(p_InputCV.y);
	outputCV.z = lin_to_rec(p_InputCV.z);

	return outputCV;
}

__DEVICE__ float3 rev_gamma(float3 p_InputCV, __CONSTANTREF__ AcesTransformUserSettingParams* p_AcesParams)
{
	float3 outputCV;


	outputCV.x = rec_to_lin(p_InputCV.x);
	outputCV.y = rec_to_lin(p_InputCV.y);
	outputCV.z = rec_to_lin(p_InputCV.z);
	
	return outputCV;
}


__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {

	const float3 result = AcesInvOutputTransform(p_R, p_G, p_B);
	
	return result;
}
